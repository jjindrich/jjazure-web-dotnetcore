trigger: none

pool:
  vmImage: 'ubuntu-18.04'

variables:
  subscription: 'JJ Microsoft Azure Internal Consumption (82fb79bf-ee69-4a57-a76c-26153e544afe)'
  acrName: 'jjakscontainers'
  dockerImage: 'jjakscontainers.azurecr.io/jmeter'
  tfDirectory: 'jmeter-loadtest/terraform'
  tfResourceGroupName: 'jjdevmanagement'
  tfStorageAccountName: 'jjtfstate'
  tfStorageContainerName: 'jmeter'
  tfKey: 'terraform.tfstate'
  jmeterDirectory: '$(System.DefaultWorkingDirectory)/jmeter-loadtest/testcase'
  jmeterOutDirectory: '$(System.DefaultWorkingDirectory)/jmeter-loadtest/results'
  TF_VAR_RESOURCE_GROUP_NAME: 'jjmicroservices-jmeter-rg'
  TF_VAR_JMETER_ACR_NAME: 'jjakscontainers'
  TF_VAR_JMETER_ACR_RESOURCE_GROUP_NAME: 'jjmicroservices-rg'
  TF_VAR_JMETER_DOCKER_IMAGE: 'jjakscontainers.azurecr.io/jmeter'
  TF_VAR_JMETER_JMX_FILE: 'sample.jmx'
  TF_VAR_JMETER_WORKERS_COUNT: 1

steps:

  - task: TerraformInstaller@0
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: 0.13.2
  - task: TerraformTaskV1@0
    displayName: 'Terraform : Terraform init'
    inputs:
      workingDirectory: $(tfDirectory)
      provider: 'azurerm'
      command: 'init'
      backendServiceArm: $(subscription)
      backendAzureRmResourceGroupName: $(tfResourceGroupName)
      backendAzureRmStorageAccountName: $(tfStorageAccountName)
      backendAzureRmContainerName: $(tfStorageContainerName)
      backendAzureRmKey: $(tfKey)

  - task: TerraformTaskV1@0
    displayName: 'Terraform: azurerm apply (target=file share)'
    inputs:
      workingDirectory: $(tfDirectory)
      provider: 'azurerm'
      command: apply
      commandOptions: '-no-color -target azurerm_storage_share.jmeter_share'
      backendServiceArm: $(subscription)
      environmentServiceNameAzureRM: $(subscription)
      backendAzureRmResourceGroupName: $(tfResourceGroupName)
      backendAzureRmStorageAccountName: $(tfStorageAccountName)
      backendAzureRmContainerName: $(tfStorageContainerName)
      backendAzureRmKey: $(tfKey)

  - task: AzureCLI@2
    inputs:
      azureSubscription: $(subscription)
      workingDirectory: $(tfDirectory)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        an=$(terraform output storage_account_name)
        end=`date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ'`
        sas=$(az storage account generate-sas --account-name $an --services f --permissions acuw --resource-types co --expiry $end -o tsv)
        azcopy copy "$(jmeterDirectory)/*" "$(terraform output storage_file_share_url)?$sas" --recursive=true
    displayName: 'Copy JMX file'

  - task: TerraformTaskV1@0
    displayName: 'Terraform: azurerm apply (target=all)'
    inputs:
      workingDirectory: $(tfDirectory)
      provider: 'azurerm'
      command: apply
      commandOptions: '-no-color'
      backendServiceArm: $(subscription)
      environmentServiceNameAzureRM: $(subscription)
      backendAzureRmResourceGroupName: $(tfResourceGroupName)
      backendAzureRmStorageAccountName: $(tfStorageAccountName)
      backendAzureRmContainerName: $(tfStorageContainerName)
      backendAzureRmKey: $(tfKey)

  - task: AzureCLI@2
    inputs:
      azureSubscription: $(subscription)
      workingDirectory: $(tfDirectory)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        RG=$(terraform output resource_group_name)
        NAME=$(terraform output jmeter_controller_name)
        echo "`date`: Started!"
        while [ $(az container show -g $RG -n $NAME --query "containers[0].instanceView.currentState.state" -o tsv) == "Running" ]; do
          echo "`date`: Still Running..."
          sleep 20
        done
        echo "`date`: Finished!"
    displayName: 'TEST: Wait Test Execution'

  - task: AzureCLI@2
    inputs:
      azureSubscription: $(subscription)
      workingDirectory: $(tfDirectory)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az container logs -g $(terraform output resource_group_name) -n $(terraform output jmeter_controller_name)
        RESOURCE_GROUP=$(terraform output resource_group_name)
        echo -n $(terraform output jmeter_workers_names) | xargs -t -d "," -I '{}' -n1 az container logs -g $RESOURCE_GROUP -n {}
    displayName: 'RESULTS: Collect JMeter Controller and Worker Logs'

  - task: AzureCLI@2
    inputs:
      azureSubscription: $(subscription)
      workingDirectory: $(tfDirectory)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        an=$(terraform output storage_account_name)
        end=`date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ'`
        sas=$(az storage account generate-sas --account-name $an --services f --permissions lr --resource-types co --expiry $end -o tsv)
        azcopy copy "$(terraform output storage_file_share_url)?$sas" "$(jmeterOutDirectory)" --recursive=true
    displayName: 'RESULTS: Get JMeter Artifacts'

  - script: |
      ls $(jmeterOutDirectory)
      JMETER_RESULTS=$(jmeterOutDirectory)/$(terraform output jmeter_results_file)
      JUNIT_RESULTS=$(jmeterOutDirectory)/output.xml
      python3 ../scripts/jtl_junit_converter.py $JMETER_RESULTS $JUNIT_RESULTS
    workingDirectory: $(tfDirectory)
    displayName: 'RESULTS: Convert JMeter Results to JUnit Format'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(jmeterOutDirectory)/output.xml'
      failTaskOnFailedTests: true
    displayName: 'RESULTS: Publish Load Testing Results'

  - publish: $(jmeterOutDirectory)
    artifact: JMeterResults
    condition: succeededOrFailed()
    displayName: 'RESULTS: Publish Load Test Artifacts'

  - task: TerraformTaskV1@0
    displayName: 'Terraform: azurerm destroy'
    inputs:
      workingDirectory: $(tfDirectory)
      provider: 'azurerm'
      command: destroy
      commandOptions: '-no-color'
      backendServiceArm: $(subscription)
      environmentServiceNameAzureRM: $(subscription)
      backendAzureRmResourceGroupName: $(tfResourceGroupName)
      backendAzureRmStorageAccountName: $(tfStorageAccountName)
      backendAzureRmContainerName: $(tfStorageContainerName)
      backendAzureRmKey: $(tfKey)